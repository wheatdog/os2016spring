RR:
一開始用array存下所有process資訊並照ready time排序。
ready queue用circular linked list實作，指標變數cur_job指著circular linked list中正要執行的process(也就是ready queue的第一個process。)
cur_job->next是ready queue中下一個要執行的process，cur_job->last是ready queue中最後一個process。
當目前的process的時間用完，要換下一個時，只要cur_job = cur_job->next，目前的process就排到ready queue中的最後。
當新的process ready，就要排進ready queue的最後，也就是將它塞進cur_job->last。

while loop每個iteration主要流程:
一開始會檢查是否有process ready，有就fork child。
接著如果ready queue是空的(cur_job == NULL): 
  就計算要等多久下個process會ready，等完後進入下一個iteration。
否則:
  決定這次cur_job要跑多久，跑完後做對應的操作，進入下一個iteration。
所有process執行完畢後，跳出while loop，程式結束。

每個iteration中，決定cur_job要跑多久的判斷和對應的操作:
比較
1. cur_job這次time quantum剩餘的時間(remain)
2. 下個process ready的時間(p_arr[next].r_time - cur_time)
3. cur_job 剩餘的執行時間(cur_job->process->remain_time)
時間最短的就是這個iteration中cur_job要跑的時間
如果選出來的時間是1，跑完後cur_job要換下個process(也就是cur_job->next)
如果是2，跑完後進入下個iteration就會fork child
如果是3，完後cur_job要換下個process且移除目前跑完的process
